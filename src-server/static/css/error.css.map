{"version":3,"sources":["../../../components/miyagi-core/styles/_typography.scss","../../../components/miyagi-core/styles/_variables.scss","index.scss","../../../components/miyagi-core/styles/_mixins.scss"],"names":[],"mappings":"AAoDA,yEA9CI,oCACA,eAAiB,CACpB,UAoCG,kCAAoC,CACvC,KAGG,gBACA,aAAe,CAGnB,KACI,iBACA,mBAEA,cACA,sBCqFgB,CDlFpB,YACI,kCACA,QAAU,CAId,EACI,oBAAsB,CAG1B,EACI,iBACA,mBACA,iBAAmB,CAHvB,eAOQ,eAAiB,CExEzB,aACI,kBACA,MACA,OACA,QACA,SACA,gBAAkB,CACrB,YAGG,wBAA0B,CAD9B,iCAIQ,8DAAqB,CASxB,0BAbL,iCAOY,4BAA8B,CAMrC,CCRG,0BDLR,iCAWY,8DAAqB,CAE5B,CAGL,YACI,wBAA0B,CAD9B,iCAIQ,8DAAqB,CCnBrB,0BDeR,iCAOY,uBAAyB,CAMhC,CCxBG,0BDWR,iCAWY,8DAAqB,CAE5B,CAGL,eACI,oBAAA,AAAc,qBAAd,AAAc,oBAAd,AAAc,YAAA,CACjB,sBAGG,iBACA,cACA,oBAAA,AACA,qBADA,AACA,oBADA,AACA,aAAA,WACA,4BAAA,AAA+B,8BAA/B,AAA+B,sCAA/B,AAA+B,kCAA/B,AAA+B,6BAAA,CAE/B,gCAPJ,sBAQQ,8BAAA,AACA,6BADA,AACA,2BADA,AACA,uBADA,AACA,mBAAA,mBAAqB,CAE5B,CAED,eACI,kBACA,kBACA,WAAa,CAEb,gCALJ,eAMQ,mBAAA,AACA,yBADA,AACA,qBADA,AACA,iBAAA,oBAAA,AACA,qBADA,AACA,oBADA,AACA,aAAA,4BAAA,AACA,6BADA,AACA,8BADA,AACA,0BADA,AACA,sBAAA,wBAAA,AACA,+BADA,AACA,qBADA,AACA,uBAAA,eAAiB,CAExB,CAED,yBAEI,cACA,iBACA,kBAAoB,CC9DhB,0BD0DR,yBAOQ,gBACA,iBAAmB,CAE1B,CAED,6BAEI,iBACA,YACA,kBAAoB,CC1EhB,0BDsER,6BAOQ,iBACA,kBAAoB,CAE3B,CAED,qBACI,mBAAA,AACA,iBADA,AACA,aADA,AACA,SAAA,4BACA,0BACA,qBAAuB,CAW1B,2BAfD,qBAOQ,wBACA,iDAAA,AAAyC,wCAAA,CAOhD,CAJG,gCAXJ,qBAYQ,0BACA,uBAAyB,CAEhC,CAAA","file":"modules/portal/static/css/error.css","sourcesContent":["// Font Family Extends\n\n$primary-font-family: Roboto, Arial, sans-serif;\n$secondary-font-family: \"Roboto Slab\", Georgia, serif;\n\n%primary-font-light {\n    font-family: $primary-font-family;\n    font-weight: 300;\n}\n\n%primary-font-normal {\n    font-family: $primary-font-family;\n    font-weight: 400;\n}\n\n%primary-font-med {\n    font-family: $primary-font-family;\n    font-weight: 500;\n}\n\n%primary-font-bold {\n    font-family: $primary-font-family;\n    font-weight: 700;\n}\n\n%secondary-font-light {\n    font-family: $secondary-font-family;\n    font-weight: 300;\n}\n\n%secondary-font-normal {\n    font-family: $secondary-font-family;\n    font-weight: 400;\n}\n\n%secondary-font-bold {\n    font-family: $secondary-font-family;\n    font-weight: 700;\n}\n\n\n\n\nhtml, body {\n    -webkit-font-smoothing: antialiased;\n}\n\nhtml {\n    font-size: 62.5%;\n    line-height: 1;\n}\n\nbody {\n    font-size: 1.6rem;\n    font-weight: normal;\n    @extend %primary-font-light;\n    line-height: 1;\n    color: map-get($black, text);\n}\n\nh1, h2, h3, h4 {\n    text-rendering: optimizeLegibility;\n    margin: 0;\n    @extend %primary-font-light;\n}\n\na {\n    text-decoration: none;\n}\n\np {\n    font-size: 1.6rem;\n    line-height: 2.4rem;\n    margin: 0 0 2.1rem;\n    @extend %primary-font-light;\n\n    &:last-of-type {\n        margin-bottom: 0;\n    }\n}","$bps: (\n    short: 480px,\n    mobileUp: 361px,\n    mobileLandscape: 601px,\n    twoCol: 700px,\n    tabletUp: 768px,\n    desktopUp: 1072px,\n    designMax: 1380px\n);\n\n$global-header-height: (\n    s: 5.7rem,\n    m: 6.4rem,\n    l: 6.4rem\n);\n\n$site-max-width: 200rem;\n$ctn-max-width: 120rem;\n\n$keyline: (\n    xsmall: 8px,\n    small: 15px,\n    large: 20px,\n    xlarge: 72px\n);\n\n$z-index: (\n    select-boxes: 220,\n    side-navigation: 210,\n    dialogs: 210,\n    gbl-header: 200,\n    hero-fab: 190,\n    video-play-icon: 180,\n    select-backdrop: 180\n);\n\n$color: (\n    action-colored: #FF5252,\n    action-dark-15: rgba(black, 0.15),\n    action-dark-24: rgba(black, 0.24),\n    action-dark-32: rgba(black, 0.32),\n    action-dark-54: rgba(black, 0.54),\n    action-dark-87: rgba(black, 0.87),\n    action-white: white,\n\n    subpage-bg: #f5f5f5,\n    divider: rgba(black, 0.12),\n    hoverBg: rgba(black, 0.06),\n    externalLinkIcons: rgba(black, 0.32),\n    topicsHeaderBg: #37474F,\n    hyperLink: #546E7A,\n    hyperLinkHover: #37474F,\n\n    secondaryBlue: #2979FF,\n    slateGrey: #607D8B,\n    actionColouredAccessability: #0295DA,\n\n    mainPurple: #3F51B5,\n\n\n    diagnosticsSkip: #878787,\n    diagnosticsOptionDeselected: #757575,\n    diagnosticsProgressInactive: rgba(255, 255, 255, 0.7),\n    diagnosticsProgressActive: rgba(255, 255, 255, 1),\n\n    /**\n     * Colours on this project are getting used in more than one area\n     * so storing the colour against something like `cta` or `action`\n     * gives it no real meaning anymore.\n     *\n     * I believe it's a better idea to store the colour as what it is;\n     * a unique colour with it having a suitable name. The below colours\n     * is my (@Anthony) experiment into this methodology.\n     *\n     * http://davidwalsh.name/sass-color-variables-dont-suck\n     * http://chir.ag/projects/name-that-color/\n     * http://erskinedesign.com/blog/friendlier-colour-names-sass-maps/\n     */\n    \n    alabaster: (\n        base: #FAFAFA\n    ),\n    caribbeanGreen: (\n        base: #00BFA5,\n        light: lighten(#00BFA5, 8%)\n    ),\n    doveGray: (\n        base: #616161\n    ),\n    emperor: (\n        base: #565555\n    ),\n    java: (\n        base: #1EBEA5\n    ),\n    mineShaft: (\n        dark: #2D2D2D,\n        base: #343434\n    ),\n    sanMarino: (\n        base: #4054B2\n    ),\n    black: (\n        base: #000000\n    ),\n    white: (\n        base: #FFFFFF\n    ),\n    cerulean: (\n        base: #03A9F4\n    ),\n    pomegranate: (\n        base: #F44336\n    ),\n    shamrock: (\n        base: #27BEA5\n    ),\n    sunsetOrange: (\n        base: #FF5252\n    ),\n    silver: (\n        base: #BBBBBB\n    ),\n    wildSand: (\n        base: #F5F5F5\n    )\n);\n\n$lessonStateColours: (\n    completed: rgba(#757575, 0.80),\n    next: rgba(#1EB1FC, 0.54)\n);\n\n\n$shadow: (\n    1: #{0px 3px 1px -2px rgba(0, 0, 0, 0.14),0px 2px 2px 0px rgba(0, 0, 0, 0.098),0px 1px 5px 0px rgba(0, 0, 0, 0.084)},\n    2: #{0px 2px 5px 0px rgba(0,0,0,0.26), 0px 2px 10px 0px rgba(0,0,0,0.16)},\n    3: #{0px 3px 5px -1px rgba(0, 0, 0, 0.14),0px 6px 10px 0px rgba(0, 0, 0, 0.098),0px 1px 18px 0px rgba(0, 0, 0, 0.084)}\n);\n\n// UI Colours\n$black: (\n    text: rgba(black, 0.87),\n    backdrop: rgba(black, 0.60),\n    secondary: rgba(black, 0.54),\n    disabled: rgba(black, 0.26),\n    divider: rgba(black, 0.12),\n);\n\n$white: (\n    text: rgba(white, 1),\n    secondary: rgba(white, 0.70),\n    tertiary: rgba(white, 0.87),\n    disabled: rgba(white, 0.3),\n    action: rgba(white, 0.20),\n    divider: rgba(white, 0.12)\n);","@import \"../../../components/miyagi-core/styles/variables\";\n@import \"../../../components/miyagi-core/styles/mixins\";\n@import \"../../../components/miyagi-core/styles/typography\";\n\n// Android 4.1 - 4.3 doesn't understand viewport units and wrapper elements collapse.\n.error-outer {\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    min-height: 400px; // A respectable size for landscape orientation on mobiles.\n}\n\n.error--404 {\n    background-color: #388E3C;\n\n    .error-illo-ctn__img {\n        background-image: url('/static/img/error-pages/404--small.jpg');\n\n        @include bp(tab-max) {\n            background-position: 3.6rem 0;\n        }\n\n        @include bp(tab-up) {\n            background-image: url('/static/img/error-pages/404--large.jpg');\n        }\n    }\n}\n\n.error--500 {\n    background-color: #2b56c6;\n\n    .error-illo-ctn__img {\n        background-image: url('/static/img/error-pages/500--small.jpg');\n\n        @include bp(tab-max) {\n            background-position: 0 0;\n        }\n\n        @include bp(tab-up) {\n            background-image: url('/static/img/error-pages/500--large.jpg');\n        }\n    }\n}\n\n.error-wrapper {\n    display: flex;\n}\n\n.error-wrapper__inner {\n    max-width: 138rem;\n    margin: 0 auto;\n    display: flex;\n    width: 100%;\n    flex-direction: column-reverse;\n\n    @media (orientation: landscape) {\n        flex-direction: row;\n        padding-left: 12.32%;\n    }\n}\n\n.error-content {\n    text-align: center;\n    position: relative;\n    bottom: 4rem;\n\n    @media (orientation: landscape) {\n        flex: 0 0 26.3rem;\n        display: flex;\n        flex-direction: column;\n        justify-content: center;\n        position: static;\n    }\n}\n\n.error-content__response {\n    @extend %primary-font-light;\n    color: #FFB74D;\n    font-size: 9.6rem;\n    line-height: 9.6rem;\n\n    @include bp(tab-up) {\n        font-size: 16rem;\n        line-height: 16rem;\n    }\n}\n\n.error-content__response-msg {\n    @extend %primary-font-light;\n    font-size: 1.8rem;\n    color: white;\n    line-height: 2.1rem;\n\n    @include bp(tab-up) {\n        font-size: 2.4rem;\n        line-height: 2.8rem;\n    }\n}\n\n.error-illo-ctn__img {\n    flex: 1 0;\n    background-repeat: no-repeat;\n    background-position: 50% 0;\n    background-size: cover;\n\n    @media (max-height: 480px) {\n        background-size: contain;\n        background-position: calc(50% + 1.8rem) 0;\n    }\n\n    @media (orientation: landscape) {\n        background-position: 50% 0;\n        background-size: contain;\n    }\n}","@import \"./import-once\";\n\n\n@mixin bp($point) {\n    // 361 -> 767\n    @if $point == mobile-large {\n        @media (min-width: map-get($bps, mobileUp)) { @content; }\n    }\n    @else if $point == mobile-landscape-up {\n        @media (min-width: map-get($bps, mobileLandscape)) { @content; }\n    }\n    @else if $point == two-col {\n        @media (min-width: map-get($bps, twoCol)) { @content; }\n    }\n    @else if $point == tab-max {\n        @media (max-width: 767px) { @content; }\n    }\n    // 768 -> 1072\n    @else if $point == tab-up {\n        @media (min-width: map-get($bps, tabletUp)) { @content; }\n    }\n    // 1072up\n    @else if $point == dt-up {\n        @media (min-width: map-get($bps, desktopUp)) { @content; }\n    }\n    @else if $point == max-out {\n        @media (min-width: map-get($bps, designMax)) { @content; }\n    }\n    @else if $point == short {\n        @media (max-height: map-get($bps, short)) { @content; }\n    }\n}\n\n@mixin font-face($fontFamily, $fontFile) {\n    @font-face {\n        font-family: $fontFamily;\n        src: url('#{$fontPath}/#{$fontFile}.eot');\n        src: url('#{$fontPath}/#{$fontFile}.eot?#iefix') format('embedded-opentype'),\n             url('#{$fontPath}/#{$fontFile}.woff') format('woff'),\n             url('#{$fontPath}/#{$fontFile}.ttf') format('truetype');\n        font-weight: normal;\n        font-style: normal;\n    }\n}\n\n/**\n * A short-hand way of looking up a colour within a nested map\n * of our $color map.\n *\n * Example Mapping:\n * $color: (\n *     caribbeanGreen: (\n *         base: #00BFA5,\n *         light: rgba(#00BFA5, 0.8)\n *     )\n * )\n *\n * Example Usage:\n * background-colour: palette(caribbeanGreen, base);\n *\n * @param {String} $palette - Key of nested map within $color.\n * @param {String} $tone - Key of the chosen nested map.\n * @return {String}\n */\n@function palette($palette, $tone: 'base') {\n    @return map-get(map-get($color, $palette), $tone);\n}\n\n////\n// iOS Viewport Height Fix.\n////\n\n// Variables that exist merely so you can reference them in your `@content` code.\n$ios-height: 0;\n$ios-width: 0;\n\n// Map of sub-maps representing various iOS devices on the market.\n$ios-media: (\n    // iPads in landscape\n    (\n        query-string: 'only screen and (device-width: 768px) and (device-height: 1024px) and (orientation: landscape)',\n        width: 1024px,\n        height: 768px\n    ),\n    // iPads in portrait\n    (\n        query-string: 'only screen and (device-width: 768px) and (device-height: 1024px) and (orientation: portrait)',\n        width: 768px,\n        height: 1024px\n    ),\n    // iPhone 6 in landscape\n    (\n        query-string: 'only screen and (device-width: 375px) and (device-height: 667px) and (orientation: landscape)',\n        width: 667px,\n        height: 375px\n    ),\n    // iPhone 6 in portrait\n    (\n        query-string: 'only screen and (device-width: 375px) and (device-height: 667px) and (orientation: portrait)',\n        width: 375px,\n        height: 667px\n    ),\n    // iPhone 6 Plus in landscape\n    (\n        query-string: 'only screen and (device-width: 414px) and (device-height: 736px) and (orientation: landscape)',\n        width: 736px,\n        height: 414px\n    ),\n    // iPhone 6 Plus in portrait\n    (\n        query-string: 'only screen and (device-width: 414px) and (device-height: 736px) and (orientation: portrait)',\n        width: 414px,\n        height: 736px\n    ),\n    // iPhone 5 & 5S in landscape\n    (\n        query-string: 'only screen and (device-width: 320px) and (device-height: 568px) and (orientation: landscape)',\n        width: 568px,\n        height: 320px\n    ),\n    // iPhone 5 & 5S in portrait\n    (\n        query-string: 'only screen and (device-width: 320px) and (device-height: 568px) and (orientation: portrait)',\n        width: 320px,\n        height: 568px\n    ),\n    // iPhone 2G-4S in landscape\n    (\n        query-string: 'only screen and (device-width: 320px) and (device-height: 480px) and (orientation: landscape)',\n        width: 480px,\n        height: 320px\n    ),\n    // iPhone 2G-4S in portrait\n    (\n        query-string: 'only screen and (device-width: 320px) and (device-height: 480px) and (orientation: portrait)',\n        width: 320px,\n        height: 480px\n    )\n);\n\n// Outputs your code block nested inside various iOS media queries.\n// The code-block has access to the width / height variables so that\n// viewport units can be calculated in fixed pixels.\n//\n// Example:\n// .test {\n//     height: 55vh\n//     @include ios-media() {\n//         height: $ios-height * 0.55;\n//     }\n// }\n@mixin ios-media() {\n    @each $medium in $ios-media {\n        $ios-height: map-get($medium, 'height') !global;\n        $ios-width: map-get($medium, 'width') !global;\n\n        @media #{map-get($medium, 'query-string')} {\n            @content;\n        }\n    }\n}"],"sourceRoot":"/source/"}