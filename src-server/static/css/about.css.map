{"version":3,"sources":["../../../components/miyagi-core/styles/_typography.scss","index.scss","../../../components/miyagi-core/styles/_variables.scss","../../../components/miyagi-core/styles/_mixins.scss"],"names":[],"mappings":"AAoDA,mBA9CI,oCACA,eAAiB,CACpB,qBAaG,oCACA,eAAiB,CCqBrB,iBDjBI,wCACA,eAAiB,CACpB,UAgBG,kCAAoC,CAGxC,KACI,gBACA,aAAe,CAClB,KAGG,iBACA,mBAEA,cACA,sBEqFgB,CFpFnB,YAGG,kCACA,QAAU,CAEb,EAGG,oBAAsB,CACzB,EAGG,iBACA,mBACA,iBAAmB,CAMtB,eAFO,eAAiB,CACpB,gBCnEJ,iBAAmB,CAcnB,6BAVE,SAPY,CAEf,6BAKG,SAPY,CAEf,6BAKG,SAPY,CAEf,uDAYG,wBC8EkB,CD7ElB,0BAIH,eAGE,uBAAyB,CAE1B,CAED,uBACC,mBACA,cCfc,CDgBd,cAGA,UCkEoB,CD/DrB,iBAEC,eACA,gBACA,UC2DoB,CCvFb,0BFwBR,iBAOK,iBACA,mBAAgB,CAEpB,CAED,uBACC,kBACA,gCACA,yBACG,gHAEqB,CE1CjB,0BFoCR,uBASE,mBC3Ca,CD6Cd,CAED,+BACC,WACA,gBACA,aAAe,CACf,4BAGA,kBACA,aACA,WACA,WAEA,2CAAA,AAA4B,0BAAA,CAK5B,0BAXD,4BASE,YAAc,CAEf,CAED,aACC,WACA,mBACA,wBACA,SAAU,CAKV,eAFC,eAAiB,CACjB,aAID,kBACA,eAAiB,CEjFV,0BF+ER,aAKE,kBAAoB,CAYrB,CEhGO,0BF+ER,oBAWG,WACA,cACA,SACA,kBAAoB,CAErB,CE/FM,0BFkGR,6BAGE,kBACA,OACA,MACA,QACA,QAAU,CAEX,CAED,mBACC,cACA,UAAY,CASZ,0BAXD,mBAKE,kBACA,SACA,WACA,YACA,kCAAA,AAAoB,yBAAA,CAErB,CAED,0BACC,iBAAmB,CAGpB,0BACC,kBACA,OACA,MACA,QACA,SACA,WACA,UACA,6BACA,WAAa,CAKb,0BAdD,0BAYE,YAAc,CAEf,CAED,wDAGE,iCAAA,AAAiB,wBAAA,CAHnB,yDAOE,aAAe,CACf,6BAIE,aACA,gBACA,gCAAA,AACA,wBAAA,sBAAwB,CE7JpB,0BFyJR,6BAOE,cACA,uBAEA,gBACA,cACA,qBACA,kBAAoB,CAErB,CExKO,0BF0KR,sBAGE,iBACA,oBACA,oBAAsB,CAEvB,CAED,qBAGC,cACA,mBACA,aCvGoB,CDwGpB","file":"modules/portal/static/css/about.css","sourcesContent":["// Font Family Extends\n\n$primary-font-family: Roboto, Arial, sans-serif;\n$secondary-font-family: \"Roboto Slab\", Georgia, serif;\n\n%primary-font-light {\n    font-family: $primary-font-family;\n    font-weight: 300;\n}\n\n%primary-font-normal {\n    font-family: $primary-font-family;\n    font-weight: 400;\n}\n\n%primary-font-med {\n    font-family: $primary-font-family;\n    font-weight: 500;\n}\n\n%primary-font-bold {\n    font-family: $primary-font-family;\n    font-weight: 700;\n}\n\n%secondary-font-light {\n    font-family: $secondary-font-family;\n    font-weight: 300;\n}\n\n%secondary-font-normal {\n    font-family: $secondary-font-family;\n    font-weight: 400;\n}\n\n%secondary-font-bold {\n    font-family: $secondary-font-family;\n    font-weight: 700;\n}\n\n\n\n\nhtml, body {\n    -webkit-font-smoothing: antialiased;\n}\n\nhtml {\n    font-size: 62.5%;\n    line-height: 1;\n}\n\nbody {\n    font-size: 1.6rem;\n    font-weight: normal;\n    @extend %primary-font-light;\n    line-height: 1;\n    color: map-get($black, text);\n}\n\nh1, h2, h3, h4 {\n    text-rendering: optimizeLegibility;\n    margin: 0;\n    @extend %primary-font-light;\n}\n\na {\n    text-decoration: none;\n}\n\np {\n    font-size: 1.6rem;\n    line-height: 2.4rem;\n    margin: 0 0 2.1rem;\n    @extend %primary-font-light;\n\n    &:last-of-type {\n        margin-bottom: 0;\n    }\n}","@import \"../../../components/miyagi-core/styles/variables\";\n@import \"../../../components/miyagi-core/styles/mixins\";\n@import \"../../../components/miyagi-core/styles/typography\";\n\n.about {\n\n}\n\n$aboutLength: 3;\n\n.about__section {\n\tposition: relative;\n\n\t@for $i from $aboutLength through 1 {\n\t\t&:nth-child(#{$aboutLength - $i}) {\n\t\t\tz-index: $i;\n\t\t}\n\t}\n\n\t&:nth-child(even) {\n\n\t\t.about__section-header {\n\t\t\tbackground-color: palette(sanMarino, base);\n\t\t}\n\t}\n}\n\n.about__header {\n\n\t@media (max-width: 767px) {\n\t\tpadding: 2.4rem 0 6.3rem;\n\t}\n}\n\n.about-header__content {\n\tmax-width: 103.2rem;\n\tpadding: 0 map-get($keyline, small);\n}\n\n.about__title {\n\tcolor: palette(white, base);\n}\n\n.about__subtitle {\n\t@extend %secondary-font-light;\n\tfont-size: 2rem;\n\tline-height: (26 / 20);\n\tcolor: palette(white, base);\n\n    @include bp(tab-up) {\n    \tfont-size: 2.8rem;\n    \tline-height: (45 / 28);\n\t}\n}\n\n.about__section-header {\n\tposition: relative;\n\tpadding: 3rem 5.2rem 2.6rem map-get($keyline, small);\n\tbackground-color: palette(shamrock, base);\n    box-shadow: 0px 3px 1px -2px rgba(0,0,0,0.14),\n    \t0px 2px 2px 0px rgba(0,0,0,0.098),\n    \t0px 1px 5px 0px rgba(0,0,0,0.084);\n\n    @include bp(tab-up) {\n\t\tpadding: 3.2rem map-get($keyline, small);\n\t}\n}\n\n.about__section-header-content {\n\twidth: 100%;\n\tmax-width: 76rem;\n\tmargin: 0 auto;\n}\n\n.about__section-header-icon {\n\tposition: absolute;\n\tright: 1.4rem;\n\ttop: 3.2rem;\n\tcolor: palette(white, base);\n\n\ttransition: transform 100ms;\n\n    @include bp(tab-up) {\n\t\tdisplay: none;\n\t}\n}\n\n.about__copy {\n\twidth: 100%;\n\tmax-width: 103.2rem;\n\tmargin: 3.8rem auto 3rem;\n\tpadding: 0 map-get($keyline, medium);\n\n\tp {\n\t\tmax-width: 68rem;\n\t}\n}\n\n.about__hero {\n\tposition: relative;\n\toverflow: hidden;\n\n\t@include bp(tab-up) {\n\t\tmax-height: 51.4rem;\n\t}\n\n\t&:before {\n\n\t\t@include bp(tab-up) {\n\t\t\tcontent: '';\n\t\t\tdisplay: block;\n\t\t\theight: 0;\n\t\t\tpadding-bottom: 45%;\n\t\t}\n\t}\n}\n\n.about__hero-image-container {\n\n\t@include bp(tab-up) {\n\t\tposition: absolute;\n\t\tleft: 0;\n\t\ttop: 0;\n\t\tright: 0;\n\t\tbottom: 0;\n\t}\n}\n\n.about__hero-image {\n\tdisplay: block;\n\twidth: 100%;\n\n\t@include bp(tab-up) {\n\t\tposition: relative;\n\t\tleft: 50%;\n\t\twidth: auto;\n\t\theight: 100%;\n\t\ttransform: translate(-50%);\n\t}\n}\n\n.about__accordion-content {\n\tposition: relative;\n}\n\n.about__accordion-trigger {\n\tposition: absolute;\n\tleft: 0;\n\ttop: 0;\n\tright: 0;\n\tbottom: 0;\n\twidth: 100%;\n\tpadding: 0;\n\tbackground-color: rgba(0, 0, 0, 0);\n\tborder: none;\n\n    @include bp(tab-up) {\n\t\tdisplay: none;\n\t}\n}\n\n.accordion__item--is-active {\n\n\t.about__section-header-icon {\n\t\ttransform: rotate(180deg);\n\t}\n\n\t.about__accordion-item-panel {\n\t\tdisplay: block;\n\t}\n}\n\n.about__accordion-item-panel {\n    display: none;\n    overflow: hidden;\n    transition: height 400ms;\n    padding: 4rem 2rem 3rem;\n\n    @include bp(tab-up) {\n\t\tdisplay: block;\n\t\theight: auto !important;\n\n\t\tmax-width: 790px;\n\t\tmargin: 0 auto;\n\t\tpadding-right: 8.2rem;\n\t\tpadding-top: 4.6rem;\n\t}\n}\n\np.about__section-copy {\n\n\t@include bp(tab-up) {\n\t\tfont-size: 1.8rem;\n\t\tline-height: (30 / 18);\n\t\tmargin-bottom: 2.8rem;\n\t}\n}\n\n.about__section-link {\n\n\t@extend %primary-font-bold;\n\tdisplay: block;\n\tpadding-top: 1.8rem;\n\tcolor: palette(sanMarino, base);\n}","$bps: (\n    short: 480px,\n    mobileUp: 361px,\n    mobileLandscape: 601px,\n    twoCol: 700px,\n    tabletUp: 768px,\n    desktopUp: 1072px,\n    designMax: 1380px\n);\n\n$global-header-height: (\n    s: 5.7rem,\n    m: 6.4rem,\n    l: 6.4rem\n);\n\n$site-max-width: 200rem;\n$ctn-max-width: 120rem;\n\n$keyline: (\n    xsmall: 8px,\n    small: 15px,\n    large: 20px,\n    xlarge: 72px\n);\n\n$z-index: (\n    select-boxes: 220,\n    side-navigation: 210,\n    dialogs: 210,\n    gbl-header: 200,\n    hero-fab: 190,\n    video-play-icon: 180,\n    select-backdrop: 180\n);\n\n$color: (\n    action-colored: #FF5252,\n    action-dark-15: rgba(black, 0.15),\n    action-dark-24: rgba(black, 0.24),\n    action-dark-32: rgba(black, 0.32),\n    action-dark-54: rgba(black, 0.54),\n    action-dark-87: rgba(black, 0.87),\n    action-white: white,\n\n    subpage-bg: #f5f5f5,\n    divider: rgba(black, 0.12),\n    hoverBg: rgba(black, 0.06),\n    externalLinkIcons: rgba(black, 0.32),\n    topicsHeaderBg: #37474F,\n    hyperLink: #546E7A,\n    hyperLinkHover: #37474F,\n\n    secondaryBlue: #2979FF,\n    slateGrey: #607D8B,\n    actionColouredAccessability: #0295DA,\n\n    mainPurple: #3F51B5,\n\n\n    diagnosticsSkip: #878787,\n    diagnosticsOptionDeselected: #757575,\n    diagnosticsProgressInactive: rgba(255, 255, 255, 0.7),\n    diagnosticsProgressActive: rgba(255, 255, 255, 1),\n\n    /**\n     * Colours on this project are getting used in more than one area\n     * so storing the colour against something like `cta` or `action`\n     * gives it no real meaning anymore.\n     *\n     * I believe it's a better idea to store the colour as what it is;\n     * a unique colour with it having a suitable name. The below colours\n     * is my (@Anthony) experiment into this methodology.\n     *\n     * http://davidwalsh.name/sass-color-variables-dont-suck\n     * http://chir.ag/projects/name-that-color/\n     * http://erskinedesign.com/blog/friendlier-colour-names-sass-maps/\n     */\n    \n    alabaster: (\n        base: #FAFAFA\n    ),\n    caribbeanGreen: (\n        base: #00BFA5,\n        light: lighten(#00BFA5, 8%)\n    ),\n    doveGray: (\n        base: #616161\n    ),\n    emperor: (\n        base: #565555\n    ),\n    java: (\n        base: #1EBEA5\n    ),\n    mineShaft: (\n        dark: #2D2D2D,\n        base: #343434\n    ),\n    sanMarino: (\n        base: #4054B2\n    ),\n    black: (\n        base: #000000\n    ),\n    white: (\n        base: #FFFFFF\n    ),\n    cerulean: (\n        base: #03A9F4\n    ),\n    pomegranate: (\n        base: #F44336\n    ),\n    shamrock: (\n        base: #27BEA5\n    ),\n    sunsetOrange: (\n        base: #FF5252\n    ),\n    silver: (\n        base: #BBBBBB\n    ),\n    wildSand: (\n        base: #F5F5F5\n    )\n);\n\n$lessonStateColours: (\n    completed: rgba(#757575, 0.80),\n    next: rgba(#1EB1FC, 0.54)\n);\n\n\n$shadow: (\n    1: #{0px 3px 1px -2px rgba(0, 0, 0, 0.14),0px 2px 2px 0px rgba(0, 0, 0, 0.098),0px 1px 5px 0px rgba(0, 0, 0, 0.084)},\n    2: #{0px 2px 5px 0px rgba(0,0,0,0.26), 0px 2px 10px 0px rgba(0,0,0,0.16)},\n    3: #{0px 3px 5px -1px rgba(0, 0, 0, 0.14),0px 6px 10px 0px rgba(0, 0, 0, 0.098),0px 1px 18px 0px rgba(0, 0, 0, 0.084)}\n);\n\n// UI Colours\n$black: (\n    text: rgba(black, 0.87),\n    backdrop: rgba(black, 0.60),\n    secondary: rgba(black, 0.54),\n    disabled: rgba(black, 0.26),\n    divider: rgba(black, 0.12),\n);\n\n$white: (\n    text: rgba(white, 1),\n    secondary: rgba(white, 0.70),\n    tertiary: rgba(white, 0.87),\n    disabled: rgba(white, 0.3),\n    action: rgba(white, 0.20),\n    divider: rgba(white, 0.12)\n);","@import \"./import-once\";\n\n\n@mixin bp($point) {\n    // 361 -> 767\n    @if $point == mobile-large {\n        @media (min-width: map-get($bps, mobileUp)) { @content; }\n    }\n    @else if $point == mobile-landscape-up {\n        @media (min-width: map-get($bps, mobileLandscape)) { @content; }\n    }\n    @else if $point == two-col {\n        @media (min-width: map-get($bps, twoCol)) { @content; }\n    }\n    @else if $point == tab-max {\n        @media (max-width: 767px) { @content; }\n    }\n    // 768 -> 1072\n    @else if $point == tab-up {\n        @media (min-width: map-get($bps, tabletUp)) { @content; }\n    }\n    // 1072up\n    @else if $point == dt-up {\n        @media (min-width: map-get($bps, desktopUp)) { @content; }\n    }\n    @else if $point == max-out {\n        @media (min-width: map-get($bps, designMax)) { @content; }\n    }\n    @else if $point == short {\n        @media (max-height: map-get($bps, short)) { @content; }\n    }\n}\n\n@mixin font-face($fontFamily, $fontFile) {\n    @font-face {\n        font-family: $fontFamily;\n        src: url('#{$fontPath}/#{$fontFile}.eot');\n        src: url('#{$fontPath}/#{$fontFile}.eot?#iefix') format('embedded-opentype'),\n             url('#{$fontPath}/#{$fontFile}.woff') format('woff'),\n             url('#{$fontPath}/#{$fontFile}.ttf') format('truetype');\n        font-weight: normal;\n        font-style: normal;\n    }\n}\n\n/**\n * A short-hand way of looking up a colour within a nested map\n * of our $color map.\n *\n * Example Mapping:\n * $color: (\n *     caribbeanGreen: (\n *         base: #00BFA5,\n *         light: rgba(#00BFA5, 0.8)\n *     )\n * )\n *\n * Example Usage:\n * background-colour: palette(caribbeanGreen, base);\n *\n * @param {String} $palette - Key of nested map within $color.\n * @param {String} $tone - Key of the chosen nested map.\n * @return {String}\n */\n@function palette($palette, $tone: 'base') {\n    @return map-get(map-get($color, $palette), $tone);\n}\n\n////\n// iOS Viewport Height Fix.\n////\n\n// Variables that exist merely so you can reference them in your `@content` code.\n$ios-height: 0;\n$ios-width: 0;\n\n// Map of sub-maps representing various iOS devices on the market.\n$ios-media: (\n    // iPads in landscape\n    (\n        query-string: 'only screen and (device-width: 768px) and (device-height: 1024px) and (orientation: landscape)',\n        width: 1024px,\n        height: 768px\n    ),\n    // iPads in portrait\n    (\n        query-string: 'only screen and (device-width: 768px) and (device-height: 1024px) and (orientation: portrait)',\n        width: 768px,\n        height: 1024px\n    ),\n    // iPhone 6 in landscape\n    (\n        query-string: 'only screen and (device-width: 375px) and (device-height: 667px) and (orientation: landscape)',\n        width: 667px,\n        height: 375px\n    ),\n    // iPhone 6 in portrait\n    (\n        query-string: 'only screen and (device-width: 375px) and (device-height: 667px) and (orientation: portrait)',\n        width: 375px,\n        height: 667px\n    ),\n    // iPhone 6 Plus in landscape\n    (\n        query-string: 'only screen and (device-width: 414px) and (device-height: 736px) and (orientation: landscape)',\n        width: 736px,\n        height: 414px\n    ),\n    // iPhone 6 Plus in portrait\n    (\n        query-string: 'only screen and (device-width: 414px) and (device-height: 736px) and (orientation: portrait)',\n        width: 414px,\n        height: 736px\n    ),\n    // iPhone 5 & 5S in landscape\n    (\n        query-string: 'only screen and (device-width: 320px) and (device-height: 568px) and (orientation: landscape)',\n        width: 568px,\n        height: 320px\n    ),\n    // iPhone 5 & 5S in portrait\n    (\n        query-string: 'only screen and (device-width: 320px) and (device-height: 568px) and (orientation: portrait)',\n        width: 320px,\n        height: 568px\n    ),\n    // iPhone 2G-4S in landscape\n    (\n        query-string: 'only screen and (device-width: 320px) and (device-height: 480px) and (orientation: landscape)',\n        width: 480px,\n        height: 320px\n    ),\n    // iPhone 2G-4S in portrait\n    (\n        query-string: 'only screen and (device-width: 320px) and (device-height: 480px) and (orientation: portrait)',\n        width: 320px,\n        height: 480px\n    )\n);\n\n// Outputs your code block nested inside various iOS media queries.\n// The code-block has access to the width / height variables so that\n// viewport units can be calculated in fixed pixels.\n//\n// Example:\n// .test {\n//     height: 55vh\n//     @include ios-media() {\n//         height: $ios-height * 0.55;\n//     }\n// }\n@mixin ios-media() {\n    @each $medium in $ios-media {\n        $ios-height: map-get($medium, 'height') !global;\n        $ios-width: map-get($medium, 'width') !global;\n\n        @media #{map-get($medium, 'query-string')} {\n            @content;\n        }\n    }\n}"],"sourceRoot":"/source/"}